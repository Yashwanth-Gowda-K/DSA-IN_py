A **Priority Queue** is a special type of queue where each element is assigned a **priority**. In a priority queue, the element with the **highest priority** is dequeued (removed) first, regardless of the order in which elements were added. It is different from a regular queue because items can be processed out of the order they were added, based on their priority.

### How Priority Queue Works
1. Each element in the priority queue has a **priority level** (a number or value).
2. The element with the **highest priority** is dequeued first.
3. If two elements have the same priority, they are dequeued in the order they were added (FIFO for equal priority).

### When to Use Priority Queues
You would use a priority queue in situations where you need to process items based on importance or urgency, such as:
- **Task scheduling**: Process tasks based on priority (high-priority tasks first).
- **Dijkstra's algorithm for shortest path**: Nodes are processed based on distance.
- **Huffman coding**: Building a tree based on the frequency of characters.

### Implementing a Priority Queue in Python
In Python, you can use the `heapq` module to create a priority queue. This module implements a **min-heap**, where the smallest element is considered the highest priority. You can modify it for a max-heap if needed.

### Example of Priority Queue (Min-Heap)

```python
import heapq

# Create an empty priority queue (min-heap)
priority_queue = []

# Enqueue operation (adding items with priorities)
# heapq uses a tuple: (priority, item)
heapq.heappush(priority_queue, (3, "task3"))  # Priority 3
heapq.heappush(priority_queue, (1, "task1"))  # Priority 1 (highest priority)
heapq.heappush(priority_queue, (2, "task2"))  # Priority 2

# The queue looks like this: [(1, 'task1'), (3, 'task3'), (2, 'task2')]

# Dequeue operation (removing the highest priority item)
highest_priority_task = heapq.heappop(priority_queue)
print("Dequeued item:", highest_priority_task)  # Output: (1, 'task1')
# Queue now: [(2, 'task2'), (3, 'task3')]

# Peek operation (view the highest priority item without removing it)
top_task = priority_queue[0]
print("Top item is:", top_task)  # Output: (2, 'task2')
```

### Explanation
1. **Enqueue (Adding items)**: We use `heapq.heappush()` to add tasks with a priority. The tuple `(priority, item)` represents the priority and task. Lower numbers indicate higher priority (e.g., priority 1 is the highest).
   
2. **Dequeue (Removing items)**: We use `heapq.heappop()` to remove and return the item with the highest priority (the one with the smallest priority number).

3. **Peek**: We can access the highest priority item directly using `priority_queue[0]` without removing it.

### Priority Queue Example in a Real-Life Scenario

Imagine a hospital emergency room where patients with more critical conditions are treated first. You could represent patients as tasks in a priority queue, with their severity level as the priority:

```python
# Example with patients and their severity levels
priority_queue = []
heapq.heappush(priority_queue, (5, "Patient with mild headache"))
heapq.heappush(priority_queue, (1, "Patient with heart attack"))  # Highest priority
heapq.heappush(priority_queue, (3, "Patient with broken leg"))

# Treat the patient with the highest priority first
print(heapq.heappop(priority_queue))  # Output: (1, 'Patient with heart attack')
```

### Summary

- **Priority Queue**: Items are removed based on priority, not order of insertion.
- **Min-Heap**: In Python, `heapq` uses a min-heap by default, meaning the item with the smallest priority is considered the highest priority.
- **When to Use**: Use a priority queue when you need to process elements based on their priority, like in task scheduling or event handling.
