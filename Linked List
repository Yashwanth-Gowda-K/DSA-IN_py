### What is a Linked List?

A **linked list** is a linear data structure in which elements (called **nodes**) are stored in a sequence, but each node contains **two parts**:
1. **Data**: The actual information or value of the node.
2. **Next (Pointer)**: A reference to the next node in the sequence.

In simple terms, a linked list is a chain of nodes where each node points to the next one. The first node is called the **head**, and the last node points to `None`, indicating the end of the list.

### Types of Linked Lists
1. **Singly Linked List**: Each node points only to the next node.
2. **Doubly Linked List**: Each node points to both the next and the previous node.
3. **Circular Linked List**: The last node points back to the first node.

### When to Use a Linked List?

A linked list is useful when:
- You need efficient **insertions and deletions** at the beginning or middle of the list. Unlike arrays, where shifting elements is required, linked lists allow you to add or remove elements without shifting other elements.
- **Dynamic memory allocation** is needed because the size of the list can grow or shrink as needed.
- You don't need fast **random access** (i.e., accessing an element by index), as linked lists have slower access times compared to arrays.

### Example of a Singly Linked List in Python

Here’s how you can implement a **singly linked list** in Python. We will create a class for **Node** and a class for the **LinkedList** itself.

```python
class Node:
    def __init__(self, data):
        self.data = data  # Store data
        self.next = None  # Pointer to next node (initially None)

class LinkedList:
    def __init__(self):
        self.head = None  # The head node of the linked list

    # Method to add a node at the end
    def append(self, data):
        new_node = Node(data)  # Create a new node
        if not self.head:  # If the list is empty, the new node becomes the head
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:  # Traverse until the last node
            last_node = last_node.next
        last_node.next = new_node  # Set the last node's next to the new node

    # Method to print the linked list
    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")  # Indicate the end of the list

    # Method to delete a node with specific data
    def delete(self, key):
        current = self.head
        if current and current.data == key:  # If the node to delete is the head
            self.head = current.next  # Move the head to the next node
            current = None
            return
        prev = None
        while current and current.data != key:
            prev = current
            current = current.next
        if current is None:  # Node with the key not found
            return
        prev.next = current.next  # Remove the node
        current = None

# Example usage:
linked_list = LinkedList()
linked_list.append(1)  # Add 1 to the list
linked_list.append(2)  # Add 2 to the list
linked_list.append(3)  # Add 3 to the list
linked_list.append(4)  # Add 4 to the list

print("Linked List:")
linked_list.print_list()  # Output: 1 -> 2 -> 3 -> 4 -> None

linked_list.delete(3)  # Delete node with data 3
print("After deleting 3:")
linked_list.print_list()  # Output: 1 -> 2 -> 4 -> None
```

### Explanation:
1. **Node class**: Each `Node` object stores `data` and a reference (`next`) to the next node.
2. **LinkedList class**:
   - `append(data)`: Adds a new node with the given data at the end of the list.
   - `print_list()`: Prints all the elements in the list.
   - `delete(key)`: Deletes the first node with the specified data (key).

### Example Output:

```
Linked List:
1 -> 2 -> 3 -> 4 -> None
After deleting 3:
1 -> 2 -> 4 -> None
```

### Why Use a Linked List?

- **Dynamic Size**: A linked list does not have a fixed size, unlike arrays. The list can grow or shrink dynamically as elements are added or removed.
- **Efficient Insertion/Deletion**: If you need to insert or remove items frequently from the beginning or middle, linked lists are more efficient than arrays, as they don’t require shifting elements.
- **No Wasted Space**: Linked lists use memory only for the elements that exist, unlike arrays, which may allocate extra space.

### Limitations of Linked Lists:
- **Access Time**: Accessing an element in a linked list takes linear time, i.e., you need to traverse from the head node to find the node you're looking for, making random access slower than in arrays.
- **Memory Usage**: Each node requires extra memory for the pointer/reference (`next`), making linked lists more memory-intensive than arrays.

### Summary:
- **Linked List**: A dynamic, sequential data structure made of nodes, where each node points to the next.
- **When to Use**: When you need efficient insertions or deletions, and don’t need fast random access to elements.
- **Operations**: Insertion, deletion, and traversal are common operations performed on linked lists.
